coarsegrainUnivariate = function(x, eps, fun = mean, ...){
# Function coarsegrains a vector x by partitioning it into bins of size eps
# and computing the average within the bins.
n <- length(x)
r <- n %% eps
return(apply(matrix(x[1:(n-r)], 2, function(x) fun(x, ...)))
}
coarsegrainUnivariate = function(x, eps, fun = mean, ...){
# Function coarsegrains a vector x by partitioning it into bins of size eps
# and computing the average within the bins.
n <- length(x)
r <- n %% eps
return(apply(matrix(x[1:(n-r)], 2, function(x) fun(x, ...))))
}
coarsegrainMultivariate = function(mat, eps, fun = mean, ...){
# Function coarsegrains a multivariate time series given by a
# pxn matrix mat (where p is the number of variables)
return(t(apply(mat, 1, function(x) coarsegrainUnivariate(x, eps, fun, ...))))
}
data = matrix(rnorm(3000), nrow = 3)
test = coursegrainMultivariate(data, eps = 5, fun = mean)
test = coarsegrainMultivariate(data, eps = 5, fun = mean)
coarsegrainMultivariate = function(mat, eps, fun = mean, ...){
# Function coarsegrains a multivariate time series given by a
# pxn matrix mat (where p is the number of variables)
return(t(apply(mat, 1, function(x) coarsegrainUnivariate(x, eps, fun = fun, ...))))
}
test = coarsegrainMultivariate(data, eps = 5, fun = mean)
test = coarsegrainMultivariate(data, eps = 5, fun = mean)
test = coarsegrainUnivariate(data[1,], eps = 5, FUN = mean)
coarsegrainUnivariate = function(x, eps, FUN = mean, ...){
# Function coarsegrains a vector x by partitioning it into bins of size eps
# and computing the average within the bins.
n <- length(x)
r <- n %% eps
return(apply(matrix(x[1:(n-r)], 2, function(x) FUN(x, ...))))
}
test = coarsegrainUnivariate(data[1,], eps = 5, FUN = mean)
coarsegrainUnivariate = function(x, eps, FUN = mean, ...){
# Function coarsegrains a vector x by partitioning it into bins of size eps
# and computing the average within the bins.
n <- length(x)
r <- n %% eps
return(apply(matrix(x[1:(n-r)], 2, function(i) FUN(i, ...))))
}
test = coarsegrainUnivariate(data[1,], eps = 5, FUN = mean)
test = coarsegrainUnivariate(data[1,], eps = 5)
coarsegrainUnivariate = function(x, eps, FUN = mean, ...){
# Function coarsegrains a vector x by partitioning it into bins of size eps
# and computing the average within the bins.
FUN <- match.fun(FUN)
n <- length(x)
r <- n %% eps
return(apply(matrix(x[1:(n-r)], 2, function(i) FUN(i, ...))))
}
test = coarsegrainUnivariate(data[1,], eps = 5)
test = coarsegrainUnivariate(data[1,], eps = 5, FUN = mean)
FUN = mean
FUN <- match.fun(FUN)
x = data[1,]
eps = 5
n <- length(x)
r <- n %% eps
apply(matrix(x[1:(n-r)], 2, function(i) FUN(i, ...)))
apply(matrix(x[1:(n-r)], 2, function(i) FUN(i)))
FUN(c(1,2,3,4,5))
coarsegrainUnivariate = function(x, eps, fun = mean, ...){
# Function coarsegrains a vector x by partitioning it into bins of size eps
# and computing the average within the bins.
n <- length(x)
r <- n %% eps
return(apply(matrix(x[1:(n-r)], 2, function(i) fun(i, ...))))
}
coarsegrainUnivariate(data[1,], 5, mean)
n <- length(x)
r <- n %% eps
matrix(x[1:(n-r)])
matrix(x[1:(n-r)], nrow = eps)
coarsegrainUnivariate = function(x, eps, fun = mean, ...){
# Function coarsegrains a vector x by partitioning it into bins of size eps
# and computing the average within the bins.
n <- length(x)
r <- n %% eps
return(apply(matrix(x[1:(n-r)], nrow = eps), 2, function(i) fun(i, ...)))
}
coarsegrainUnivariate(data[1,], 5, mean)
coarsegrainUnivariate(data[1,], 5, mean, trim = .25)
coarsegrainUnivariate(data[1,], 5, mean)
coarsegrainUnivariate(data[1,], 5, var)
plot(coarsegrainUnivariate(data[1,], 5, var))
plot(coarsegrainUnivariate(data[1,], 5, var), type = 'l')
plot(coarsegrainUnivariate(data[1,], 5, mean), type = 'l')
coarsegrainMultivariate(data, 5, var)
?var
